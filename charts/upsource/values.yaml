# Default values for upsource.
# This is a YAML-formatted file.
# Declare variables to be passed into your templates.

replicaCount: 1

image:
  repository: nginx
  pullPolicy: IfNotPresent
  # Overrides the image tag whose default is the chart appVersion.
  tag: ''

imagePullSecrets: []
nameOverride: ''
fullnameOverride: ''

serviceAccount:
  # Specifies whether a service account should be created
  create: true
  # Annotations to add to the service account
  annotations: {}
  # The name of the service account to use.
  # If not set and create is true, a name is generated using the fullname template
  name: ''

podAnnotations: {}

podSecurityContext:
  {}
  # fsGroup: 2000

securityContext:
  {}
  # capabilities:
  #   drop:
  #   - ALL
  # readOnlyRootFilesystem: true
  # runAsNonRoot: true
  # runAsUser: 1000

service:
  type: ClusterIP
  port: 80

ingress:
  enabled: false
  className: ''
  annotations:
    {}
    # kubernetes.io/ingress.class: nginx
    # kubernetes.io/tls-acme: "true"
  hosts:
    - host: chart-example.local
      paths:
        - path: /
          pathType: ImplementationSpecific
  tls: []
  #  - secretName: chart-example-tls
  #    hosts:
  #      - chart-example.local

resources:
  {}
  # We usually recommend not to specify default resources and to leave this as a conscious
  # choice for the user. This also increases chances charts run on environments with little
  # resources, such as Minikube. If you do want to specify resources, uncomment the following
  # lines, adjust them as necessary, and remove the curly braces after 'resources:'.
  # limits:
  #   cpu: 100m
  #   memory: 128Mi
  # requests:
  #   cpu: 100m
  #   memory: 128Mi

autoscaling:
  enabled: false
  minReplicas: 1
  maxReplicas: 100
  targetCPUUtilizationPercentage: 80
  # targetMemoryUtilizationPercentage: 80

nodeSelector: {}

tolerations: []

affinity: {}

global:
  image:
    prefix: ''
    UPSOURCE_VERSION: 2020.1.1956
  args:

  env:
    UPSOURCE_DATABASE: datastax

    # Keystore containing the Hub SSL certificate might be required by Upsource services
    # if external Hub is behind SSL and the SSL certificate is self-signed or signed by a self-signed root CA.
    # In this case the keystore should be copied to all cluster nodes and provided to all services containers as a volume (see cluster documentation for more details).
    # By default, the keystore is expected to be found at the following path inside the container: /opt/upsource-<service-name>/conf/keystore.jks)
    # Path inside the container can be overridden by HUB_KEYSTORE_PATH parameter
    # HUB_KEYSTORE_PATH: hub_keystore_path

    # Master password for the keystore (if set)
    # HUB_KEYSTORE_PASSWORD: hub_keystore_password

    # URL of external Hub. It should be available before Upsource cluster startup
    HUB_URL: http://hub.default.svc.cluster.local:8080/hub/

    # UPSOURCE_BACKUPS_PATH_ON_HOST_SYSTEM variable defines the path on the host machine where Upsource will store backups.
    # Default value of this path is set to /opt/upsource/backups in cluster.sh file and it can be customized in docker-compose-params.env file.
    # make sure user jetbrains (with id 13001) used for starting the service inside the docker container has read/write access to that folder on the host machine.
    UPSOURCE_BACKUPS_PATH_ON_HOST_SYSTEM: /opt/upsource/backups

    # Key of the trusted service pre-configured in Hub. This service is used by all Upsource services while communicating with Hub
    UPSOURCE_SERVICE_ID: 888004de-ba79-4353-899a-a05d402f78a6

    # Secret of the trusted service pre-configured in Hub
    UPSOURCE_SERVICE_SECRET: OXLPh6Kb6Mej

    UPSOURCE_SERVICE_LISTEN_ADDRESS: 0.0.0.0

    # Defines internal port used by messaging topology
    UPSOURCE_SERVICE_MESSAGING_PORT: 10061

    # Set to false if you don't want to send anonymous usage statistics to JetBrains
    UPSOURCE_STATISTICS_UPLOAD: false

    # Base URL end users access Upsource by
    UPSOURCE_URL: http://upsource.default.svc.cluster.local

    UPSOURCE_MONITORING_RECORD_HOURS: 1

hub:
  image:
    registry: docker.io
    repository: jetbrains/hub
    tag: 2021.1.14127
    pullPolicy: IfNotPresent
  service:
    type: ClusterIP
    port: 8080
  persistence:
    storageClass: 'cbs-csi'
    size: 10Gi

analyzer:
  replicas: 2
  image:
    registry: docker.io
    repository: jetbrains/upsource-analyzer
    pullPolicy: IfNotPresent
  persistence:
    storageClass: 'cbs-csi'
    size: 10Gi
  args:
    UPSOURCE_ANALYZER_XMX: -Xmx7168m

cassandra:
  image:
    registry: docker.io
    repository: jetbrains/upsource-cassandra
    pullPolicy: IfNotPresent
  service:
    type: ClusterIP
    # Port of a node in cassandra cluster
    # CASSANDRA_NATIVE_TRANSPORT_PORT: '9042'
    port: 9042
  persistence:
    storageClass: 'cbs-csi'
    size: 10Gi

clusterInit:
  image:
    registry: docker.io
    repository: jetbrains/upsource-cluster-init
    pullPolicy: IfNotPresent
  persistence:
    storageClass: 'cbs-csi'
    size: 10Gi
  args:
    UPSOURCE_CLUSTER_INIT_XMX: -Xmx1024m

fileClustering:
  image:
    registry: docker.io
    repository: jetbrains/upsource-file-clustering
    pullPolicy: IfNotPresent
  persistence:
    storageClass: 'cbs-csi'
    size: 10Gi
  args:
    UPSOURCE_FILE_CLUSTERING_XMX: -Xmx2048m

frontend:
  replicas: 2
  image:
    registry: docker.io
    repository: jetbrains/upsource-frontend
    pullPolicy: IfNotPresent
  service:
    type: ClusterIP
    # Frontend web server listens to this port inside the cluster network.
    # All containers started for the Frontend service are load-balanced by the haproxy service which is an entry point of the cluster.
    # (Frontends are not supposed to be available through this port outside the cluster network, but only through haproxy)
    # UPSOURCE_WEB_SERVER_LISTEN_PORT: 10070
    port: 10070
  persistence:
    storageClass: 'cbs-csi'
    size: 10Gi
  args:
    UPSOURCE_FRONTEND_XMX: -Xmx3072m

opsCenter:
  image:
    registry: docker.io
    repository: jetbrains/upsource-opscenter
    pullPolicy: IfNotPresent
  service:
    type: ClusterIP
    # Monitoring and operations center web server listens to this port inside the cluster network.
    # haproxy routes all requests with context path /monitoring/ to this web server.
    # Default value of UPSOURCE_MONITORING_LISTEN_PORT is set to 10080 in cluster.sh and can be customized in file docker-compose-params.env.
    # UPSOURCE_WEB_SERVER_LISTEN_PORT: 10080
    port: 10080
  persistence:
    storageClass: 'cbs-csi'
    size: 10Gi
  args:
    UPSOURCE_OPSCENTER_XMX: -Xmx3072m

psiAgent:
  replicas: 2
  image:
    registry: docker.io
    repository: jetbrains/upsource-psi-agent
    pullPolicy: IfNotPresent
  persistence:
    storageClass: 'cbs-csi'
    size: 10Gi
  args:
    UPSOURCE_PSI_AGENT_XMX: -Xmx7168m

psiBroker:
  image:
    registry: docker.io
    repository: jetbrains/upsource-psi-broker
    pullPolicy: IfNotPresent
  service:
    type: ClusterIP
    # PSI Broker listen to PSI agents at this port.
    # UPSOURCE_PSI_BROKER_LISTEN_PORT: 10090
    port: 10090
  persistence:
    storageClass: 'cbs-csi'
    size: 10Gi
  args:
    UPSOURCE_PSI_BROKER_XMX: -Xmx1024m

haproxy:
  image:
    registry: docker.io
    repository: jetbrains/upsource-proxy
    pullPolicy: IfNotPresent
  service:
    type: ClusterIP
    port: 8080
  persistence:
    storageClass: 'cbs-csi'
    size: 10Gi
